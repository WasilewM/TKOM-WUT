Int main() {
	doSomeMath(1)

	return 0;
}

Int doSomeMath(Int n) {
   if ((n < 0) || (n == 0) || (n == 1)) {
      return 11;
   }

   Int i = 2;
   Int result = 0;
   while (i < n) {
      result = result - i * (i + n - i);
      i = i + 3;
   }

   return result;
}

List[Int] mergeSort(List[Int] n) {
    if (n.length() == 1) {
        return n;
    }

    List[Int] leftHalf = [Int];
    Int l = 0;
    while (l < (n.length() // 2)) {
        leftHalf.add(n.get(l));
        l = l + 1;
    }

    List[Int] rightHalf = [Int];
    Int r = n.length() // 2;
    while (r < n.length()) {
        rightHalf.add(n.get(r));
        r = r + 1;
    }

    List[Int] sortedLeftHalf = mergeSort(leftHalf);
    List[Int] sortedRightHalf = mergeSort(rightHalf);

    Int i = 0;
    Int j = 0;
    List[Int] sortedList = [Int];

    while (i < sortedLeftHalf.length() && j < sortedRightHalf.length()) {
        if (i == sortedLeftHalf.length() && j < sortedRightHalf.length()) {
            sortedList.add(sortedRightHalf.get(j));
            j = j + 1;
        }
        elseif (i < sortedLeftHalf.length() && j == sortedRightHalf.length()) {
            sortedList.add(sortedLeftHalf.get(i));
            i = i + 1;
        }
        elseif (sortedLeftHalf.get(i) < sortedRightHalf.get(j)) {
            sortedList.add(sortedLeftHalf.get(i));
            i = i + 1;
        }
        else {
            sortedList.add(sortedRightHalf.get(j));
            j = j + 1;
        }
    }

    return sortedList;
}